<?xml version="1.0" encoding="UTF-8"?><xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"><xsl:import href="Controller_php.xsl"/><!-- --><xsl:variable name="CONTROLLER_ID" select="'Shipment'"/><!-- --><xsl:output method="text" indent="yes"			doctype-public="-//W3C//DTD XHTML 1.0 Strict//EN" 			doctype-system="http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"/>			<xsl:template match="/">	<xsl:apply-templates select="metadata/controllers/controller[@id=$CONTROLLER_ID]"/></xsl:template><xsl:template match="controller"><![CDATA[<?php]]><xsl:call-template name="add_requirements"/>require_once('models/ShipmentRep_Model.php');require_once('models/ShipmentOperator_Model.php');require_once('models/ShipmentForOrderList_Model.php');require_once('models/ShipmentPumpList_Model.php');require_once('models/ShipmentTimeList_Model.php');require_once('controllers/Graph_Controller.php');require_once('common/SMSService.php');require_once(FRAME_WORK_PATH.'basic_classes/FieldSQLString.php');require_once(FRAME_WORK_PATH.'basic_classes/FieldSQL.php');require_once('common/barcode.php');require_once('common/barcodegen.1d-php5.v5.2.1/class/BCGFontFile.php');require_once('common/barcodegen.1d-php5.v5.2.1/class/BCGColor.php');require_once('common/barcodegen.1d-php5.v5.2.1/class/BCGDrawing.php');require_once('common/barcodegen.1d-php5.v5.2.1/class/BCGean13.barcode.php');//require_once('common/barcodegen.1d-php5.v5.2.1/class/BCGcodabar.barcode.php');//require_once('common/barcodegen.1d-php5.v5.2.1/class/BCGcode128.barcode.php');class <xsl:value-of select="@id"/>_Controller extends ControllerSQL{	public function __construct($dbLinkMaster=NULL){		parent::__construct($dbLinkMaster);<xsl:apply-templates/>	}	public function shipment_report($pm){		$model = new ShipmentRep_Model($this->getDbLink());				$from = null; $count = null;		$limit = $this->limitFromParams($pm,$from,$count);		$calc_total = ($count>0);		if ($from){			$model->setListFrom($from);		}		if ($count){			$model->setRowsPerPage($count);		}				$order = $this->orderFromParams($pm,$model);		$where = $this->conditionFromParams($pm,$model);		$fields = $this->fieldsFromParams($pm);				$grp_fields = $this->grpFieldsFromParams($pm);				$agg_fields = $this->aggFieldsFromParams($pm);							$model->select(false,$where,$order,			$limit,$fields,$grp_fields,$agg_fields,			$calc_total,TRUE);		//		$this->addModel($model);			}	public function insert($pm){		$pm->setParamValue("user_id",$_SESSION['user_id']);		parent::insert($pm);	}		public function delete($pm){		Graph_Controller::clearCacheOnShipId($this->getDbLink(),$pm->getParamValue("id"));		parent::delete($pm);	}	public function shipment_invoice($pm){		$link = $this->getDbLink();		$model = new ModelSQL($link,array("id"=>"ShipmentInvoice_Model"));		$model->addField(new FieldSQL($link,null,null,"number",DT_STRING));		$model->addField(new FieldSQL($link,null,null,"month_str",DT_STRING));		$model->addField(new FieldSQL($link,null,null,"day",DT_STRING));		$model->addField(new FieldSQL($link,null,null,"year",DT_STRING));		$model->addField(new FieldSQL($link,null,null,"time",DT_STRING));		$model->addField(new FieldSQL($link,null,null,"client_descr",DT_STRING));		$model->addField(new FieldSQL($link,null,null,"client_tel",DT_STRING));		$model->addField(new FieldSQL($link,null,null,"concrete_type_descr",DT_STRING));		$model->addField(new FieldSQL($link,null,null,"quant",DT_FLOAT));		$model->addField(new FieldSQL($link,null,null,"destination_descr",DT_STRING));		$model->addField(new FieldSQL($link,null,null,"driver_descr",DT_STRING));		$model->addField(new FieldSQL($link,null,null,"vehicle_descr",DT_STRING));						$model->setSelectQueryText(		sprintf(		"SELECT order_num(o) AS number,			get_month_rus(sh.date_time::date) AS month_str,			EXTRACT(DAY FROM sh.date_time::date) AS day,			EXTRACT(YEAR FROM sh.date_time::date) AS year,			CASE WHEN				date_part('hour',sh.date_time) &lt; 10 THEN 				'0' || date_part('hour',sh.date_time)::text				ELSE date_part('hour',sh.date_time)::text			END || '-' ||			CASE WHEN				date_part('minute',sh.date_time) &lt; 10 THEN 				'0' || date_part('minute',sh.date_time)::text				ELSE date_part('minute',sh.date_time)::text			END AS time,			ct.name AS concrete_type_descr,			cl.name_full AS client_descr,			o.phone_cel AS client_tel,			sh.quant AS quant,			dest.name AS destination_descr,			dr.name AS driver_descr,			coalesce(vh.make || ' ','') || vh.plate AS vehicle_descr		FROM shipments AS sh		LEFT JOIN orders AS o ON o.id = sh.order_id		LEFT JOIN concrete_types AS ct ON ct.id = o.concrete_type_id		LEFT JOIN destinations AS dest ON dest.id = o.destination_id		LEFT JOIN clients AS cl ON cl.id = o.client_id		LEFT JOIN vehicle_schedules AS vs ON vs.id = sh.vehicle_schedule_id		LEFT JOIN drivers AS dr ON dr.id = vs.driver_id		LEFT JOIN vehicles AS vh ON vh.id = vs.vehicle_id		WHERE sh.id=%d"		,$this->getExtDbVal($pm,'id')		));				$model->select(false,null,null,			null,null,null,null,null,TRUE);		//		$this->addModel($model);							//barcode		$shipment_id = $this->getExtVal($pm,'id');		$barcode_descr = '0'.$shipment_id.substr('000000000000',1,12-strlen($shipment_id)-1);		$barcode_descr = $barcode_descr.EAN_check_sum($barcode_descr,13);		//**** Генерация баркода ****		$colorFont = new BCGColor(0, 0, 0);		$colorBack = new BCGColor(255, 255, 255);						$code = new BCGean13(); // Or another class name from the manual		//$code = new BCGcodabar();				$code->setScale(1); // Resolution		$code->setThickness(30); // Thickness		$code->setForegroundColor($colorFont); // Color of bars		$code->setBackgroundColor($colorBack); // Color of spaces		$code->setFont(0); // Font (or 0) $font		$code->parse($barcode_descr); // Text		$drawing = new BCGDrawing('', $colorBack);		$drawing->setBarcode($code);		$drawing->draw();		ob_start();		$drawing->finish(BCGDrawing::IMG_FORMAT_PNG);		$contents = ob_get_contents();		ob_end_clean();		//**** Генерация баркода ****				$fields = array();				array_push($fields,new Field('descr',DT_STRING,array('value'=>$barcode_descr)));		array_push($fields,new Field('mime',DT_STRING,array('value'=>'image/png')));		array_push($fields,new Field('img',DT_STRING,array('value'=>base64_encode($contents))));				$this->addModel(new ModelVars(			array('id'=>'Barcode_Model',				'values'=>$fields)			)		);			}		public function set_blanks_exist($pm){		$barcode = $pm->getParamValue("barcode");		$shipment_id = 0;		if (strlen($barcode)==13 &amp;&amp; substr($barcode,0,1)=='0'){			//by barcode			$shipment_id = intval(substr($barcode,1,11));		}		else if (strlen($barcode)==12 &amp;&amp; substr($barcode,0,1)=='0'){			//by barcode			$shipment_id = intval(substr($barcode,1,10));		}				else{			//by shipment id			$shipment_id = intval($barcode);		}				if (!$shipment_id){			throw new Exception('Документ '.$barcode.' не найден!');		}						$ar = $this->getDbLinkMaster()->query_first(			sprintf(			"UPDATE shipments			SET				blanks_exist=true			WHERE id=%d			RETURNING id",			$shipment_id)		);		if (!is_array($ar) || !count($ar)){			throw new Exception('Документ '.$barcode.' не найден!');		}			}		public function get_operator_list($pm){			$dt = (!$pm->getParamValue('date'))? time() : ($this->getExtVal($pm,'date')+Beton::shiftStartTime());		$date_from = Beton::shiftStart($dt);		$date_to = Beton::shiftEnd($date_from);		$date_from_db = "'".date('Y-m-d H:i:s',$date_from)."'";		$date_to_db = "'".date('Y-m-d H:i:s',$date_to)."'";			$extra_cols_str = '';		if($_SESSION['role_id']!='operator'){			$extra_cols_str =			",shipment_time_norm(sh.quant::numeric) AS ship_norm_min			,(CASE				WHEN sh.shipped THEN					EXTRACT(EPOCH FROM						sh.ship_date_time-						(SELECT							vss.date_time						FROM vehicle_schedule_states AS vss						WHERE vss.shipment_id=sh.id						AND vss.state='assigned'						)					)/60				ELSE 0			END)::int AS ship_fact_min			,CASE				WHEN sh.shipped THEN					(EXTRACT(EPOCH FROM						sh.ship_date_time-						(SELECT							vss.date_time						FROM vehicle_schedule_states AS vss						WHERE vss.shipment_id=sh.id						AND vss.state='assigned'						)					)/60)::int - 					shipment_time_norm(sh.quant::numeric)				ELSE 0			END AS ship_bal_min";		}				$this->addNewModel(sprintf(		"WITH ships AS (		SELECT			sh.id,			clients_ref(cl) AS clients_ref,			destinations_ref(dest) AS destinations_ref, 			concrete_types_ref(ct) AS concrete_types_ref, 			vehicles_ref(v)::text AS vehicles_ref, 			drivers_ref(d) AS drivers_ref,			sh.date_time,			sh.quant,			sh.shipped,			sh.ship_date_time			%s		FROM shipments AS sh		LEFT JOIN orders o ON o.id = sh.order_id		LEFT JOIN clients cl ON cl.id = o.client_id		LEFT JOIN vehicle_schedules vs ON vs.id = sh.vehicle_schedule_id		LEFT JOIN drivers d ON d.id = vs.driver_id		LEFT JOIN vehicles v ON v.id = vs.vehicle_id		LEFT JOIN destinations dest ON dest.id = o.destination_id		LEFT JOIN concrete_types ct ON ct.id = o.concrete_type_id		WHERE sh.shipped = FALSE OR (sh.ship_date_time BETWEEN %s AND %s)		)		--Все неотгруженные		(SELECT *		FROM ships		WHERE shipped = FALSE		ORDER BY date_time)			UNION ALL			--Все отгруженные за сегодня		(SELECT *		FROM ships		WHERE shipped = TRUE		ORDER BY ship_date_time DESC)",		$extra_cols_str,		$date_from_db,		$date_to_db		),		"OperatorList_Model"		);				//totals		$this->addNewModel(sprintf(		"SELECT			coalesce((SELECT sum(quant) FROM shipments WHERE ship_date_time BETWEEN %s AND %s),0) AS quant_shipped,			coalesce((SELECT sum(quant) FROM orders WHERE date_time BETWEEN %s AND %s),0) AS quant_ordered",		$date_from_db,		$date_to_db,		$date_from_db,		$date_to_db				),		'OperatorTotals_Model');	}		public function set_shipped($pm){		$id = $pm->getParamValue("id");			$this->getDbLinkMaster()->query(			sprintf(			"UPDATE shipments SET				shipped=TRUE,				operator_user_id=%d			WHERE id=%d",			$_SESSION["user_id"],			$this->getExtDbVal($pm,"id")			)		);				Graph_Controller::clearCacheOnShipId($this->getDbLink(),$id);							//SMS service		if (SMS_ACTIVE) {			$dbLink = $this->getDbLink();			$ar = $dbLink->query_first(sprintf(			"SELECT				orders.id AS order_id,				orders.phone_cel,				shipments.quant,				concrete_types.name AS concrete,				d.name AS d_name,				coalesce(d.phone_cel,'') AS d_phone,				v.plate AS v_plate,				(SELECT pattern FROM sms_patterns					WHERE sms_type='ship'::sms_types					AND lang_id= orders.lang_id				) AS text				FROM orders			LEFT JOIN shipments ON shipments.order_id=orders.id			LEFT JOIN concrete_types ON concrete_types.id=orders.concrete_type_id			LEFT JOIN vehicle_schedules AS vs ON vs.id=shipments.vehicle_schedule_id			LEFT JOIN drivers AS d ON d.id=vs.driver_id			LEFT JOIN vehicles AS v ON v.id=vs.vehicle_id												WHERE shipments.id=%d"			,$this->getExtDbVal($pm,"id"))			);						if (strlen($ar['phone_cel'])){				$text = $ar['text'];				$text = str_replace('[quant]',$ar['quant'],$text);				$text = str_replace('[concrete]',$ar['concrete'],$text);				$text = str_replace('[car]',$ar['v_plate'],$text);								$driver = $ar['d_name'];				$d_phone = $ar['d_phone'];				$d_phone = str_replace('_','',$d_phone);				$driver.= ($d_phone!='' &amp;&amp; strlen($d_phone)==15)? ' '.$d_phone:'';								$text = str_replace('[driver]',$driver,$text);				try{					$sms_service = new SMSService(SMS_LOGIN, SMS_PWD);					$sms_id_resp = $sms_service->send($ar['phone_cel'],$text,SMS_SIGN,SMS_TEST);					$sms_id = NULL;					FieldSQLString::formatForDb($this->getDbLink(),$sms_id_resp,$sms_id);					$this->getDbLinkMaster()->query(sprintf(					"UPDATE sms_service SET						shipment_id=%d,						sms_id_shipment=%s,						shipment_sms_time='%s'					WHERE order_id=%d",						$this->getExtDbVal($pm,"id"),						$sms_id,						date('Y-m-d H:i:s'),						$ar['order_id'])					);										$sms_res_str = '';					$sms_res_ok = 1;				}				catch (Exception $e){					$sms_res_str = $e->getMessage();					$sms_res_ok = 0;				}				$this->addModel(new ModelVars(					array('id'=>'SMSSend',						'values'=>array(							new Field('sent',DT_INT,								array('value'=>$sms_res_ok))							,												new Field('resp',DT_STRING,								array('value'=>$sms_res_str))							)						)					)				);							}		}	}	public function unset_shipped(){		$pm = $this->getPublicMethod("unset_shipped");		$dbLink = $this->getDbLink();		$id = $this->getExtDbVal($pm,"id");							$ar = $dbLink->query_first(			sprintf("SELECT ship_date_time			FROM shipments WHERE id=%d",				$id)			);		if (is_array($ar)){			Graph_Controller::clearCacheOnDate(				$dbLink,strtotime($ar['ship_date_time']));				}							$this->getDbLinkMaster()->query(			sprintf("UPDATE shipments SET				shipped=false			WHERE id=%d",$id)		);	}	public function get_list_for_order(){		$this->modelGetList(new ShipmentForOrderList_Model($this->getDbLink()),			$this->getPublicMethod('get_list_for_order')		);	}	public function get_pump_list($pm){		$this->modelGetList(new ShipmentPumpList_Model($this->getDbLink()),$pm);	}	public function get_shipment_date_list($pm){		$this->modelGetList(new ShipmentDateList_Model($this->getDbLink()),$pm);	}	public function get_time_list($pm){		/*		$where = $this->conditionFromParams($pm,$model);		if(!$where){			$date_from = Beton::shiftStart(time());			$date_to = Beton::shiftEnd($date_from);				}		else{			$date_from = $where->getFieldsById('ship_date_time','>=');			if(!isset($date_from)){						}						$date_to = $where->getFieldsById('ship_date_time','&lt;=');		}		*/		$this->modelGetList(new ShipmentTimeList_Model($this->getDbLink()),$pm);	}	}<![CDATA[?>]]></xsl:template></xsl:stylesheet>